# Default values for octobox.

replicaCount: 1

global:
  octobox:
    image:
      repository: octoboxio/octobox
      pullPolicy: IfNotPresent
      ## tag or sha ref
      tag: latest

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

minReadySeconds: 0

livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 60
  periodSeconds: 10

readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 5
  periodSeconds: 10

## don't create ConfigMap and use an existing one instead
# existingConfigMap: octobox

## don't create Secret and use an existing one instead
# existingSecret: octobox

## Octobox config
config:
  ## overwrite default postgresql connection params
  postgresql:
    ## use servicebinding.io/postgresql secret created by postgresql subchart
    ## set this field to false if you want to use custom connection params
    useServiceBinding: true

    # host:
    # port:
    # databaseName:
    # username:
    # password:

  ## overwrite default redis connection params
  redis:
    ## use servicebinding.io/redis secret created by redis subchart
    ## set this field to false if you want to use custom connection params
    useServiceBinding: true

    # url: redis://user:password@redis-master.octobox

  github:
    ## setup octobox for GitHub Enterprise instead of github.com
    # domain: https://github.mycompany.com

    ## GitHub OAuth settings
    ## (register a new OAuth app under https://github.com/settings/applications/new)
    oauth:
      ## defaults to "notifications" or "notifications, read:org" if restricted access is enabled
      ## see https://github.com/octobox/octobox/blob/master/docs/INSTALLATION.md#customizing-the-scopes-on-github
      # scope: "notifications, read:org"

      ## oauth client ID and client secret of your GitHub OAuth app
      clientID: ""
      clientSecret: ""

    ## GitHub App settings (optional/additional to oauth)
    ## (register a new GitHub app under https://github.com/settings/apps/new)
    ## see https://github.com/octobox/octobox/blob/master/docs/INSTALLATION.md#running-octobox-as-a-github-app
    app: {}
      ## App ID of your GitHub App
      # appID: ""
      ## last path segment of public URL
      # appSlug: ""

      ## client ID and client secret of your GitHub App
      # clientID: ""
      # clientSecret: ""

      ## contents of private key to sign access token requests
      # privateKey: ""

      ## webhook secret for authenticating GitHub requests
      ## generate via `cat /dev/urandom | base64 | head -c 32`
      # webhookSecret: ""

    ## allow users to authenticate using personal access tokens
    ## https://github.com/octobox/octobox/blob/master/docs/INSTALLATION.md#using-personal-access-tokens
    personalAccessTokensEnabled: false

    ## restrict access to certain GitHub org or team members
    ## see https://github.com/octobox/octobox/blob/master/docs/INSTALLATION.md#limiting-access
    restrictedAccess:
      enabled: false

      ## get via `curl https://api.github.com/orgs/<org_name>`
      organizationID: ""

      ## organizationID needs to be set if restricting access to a team
      ## get via `curl https://api.github.com/orgs/<org_name>/teams' (authentication needed)
      ## or, get via `gh api orgs/stackitcloud/teams`
      teamID: ""

    ## configure IDs
    ## get via `curl https://api.github.com/users/<username>`
    adminIDs: []
    # - "12345678"

  ## download extra information about the subject of each notification
  ## (needed for thread view)
  ## see https://github.com/octobox/octobox/blob/master/docs/INSTALLATION.md#downloading-subjects
  fetchSubject: true

  ## download comments on the subject of each notification
  ## (needed for thread view)
  includeComments: true

  ## if thread view is disabled, open links in same tab instead of new one
  ## see https://github.com/octobox/octobox/blob/master/docs/INSTALLATION.md#open-links-in-the-same-tab
  openInSameTab: true

  ## allow users to set auto-refresh interval, lowest interval that can be set
  ## if set to 0, disable auto-refreshing notifications
  ## see https://github.com/octobox/octobox/blob/master/docs/INSTALLATION.md#allowing-periodic-notification-refreshes
  minimumRefreshInterval: 5

  railsEnv: production

  ## configure octobox to serve static assests on its own instead of external nginx
  serveStaticAssets: false

  ## random 32 byte encryption key
  ## generate via `cat /dev/urandom | base64 | head -c 32`
  ## see https://github.com/octobox/octobox/blob/master/docs/INSTALLATION.md#encryption-key
  octoboxAttributeEncryptionKey: ""

  ## random 32 byte key (required for production environment)
  ## generate via `cat /dev/urandom | base64 | head -c 32`
  secretKeyBase: ""

  ## enable live updates for currently viewed notifications
  ## (needs redis to be enabled)
  ## see https://github.com/octobox/octobox/blob/master/docs/INSTALLATION.md#live-updates
  pushNotifications: true

  ## allowed origins for websocket connections for live updates
  websocketAllowedOrigins: []
  # - http://localhost:3000
  # - https://localhost:3000

  ## enable Google Analytics tracking
  googleAnalyticsID: ''

## server-side notification syncs
## see https://github.com/octobox/octobox/blob/master/docs/INSTALLATION.md#scheduling-server-side-notification-syncs
notificationSync:
  ## use sidekiq for server-side notification syncs
  sidekiq:
    enabled: true
    schedule: "*/5 * * * *"

  ## use cronjob for server-side notification syncs
  cronjob:
    enabled: false
    name: notifications

    schedule: "*/5 * * * *"
    concurrencyPolicy: Replace
    successfulJobsHistoryLimit: 3
    failedJobsHistoryLimit: 1

    restartPolicy: OnFailure
    command:
    - /usr/local/bin/rake
    args:
    - "tasks:sync_notifications"

    podAnnotations: {}

    resources: {}
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
    #   cpu: 100m
    #   memory: 128Mi

    nodeSelector: {}

    tolerations: []

    affinity: {}

## extra env vars to add to octobox containers
extraEnvVars: []
# - name: name
#   value: value
# - name: other_name
#   valueFrom:
#     fieldRef:
#       fieldPath: fieldPath

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

## Pod Disruption Budget configuration
## (only sensible if replicaCount > 1)
pdb:
  create: false

  ## Min number of pods that must still be available after the eviction
  minAvailable: 1

  ## Max number of pods that can be unavailable after the eviction
  # maxUnavailable: 1

## setup NetworkPolicies for restricting ingress to components
networkPolicies:
  enabled: false

  octobox:
    ## If set to true, allow all external ingress. Otherwise, only allow ingress from correctly labelled pods.
    allowExternalIngress: true

  nginx:
    ## If set to true, allow all external ingress. Otherwise, only allow ingress from correctly labelled pods.
    allowExternalIngress: true

service:
  type: ClusterIP
  port: 80
  # nodePort: 30803

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts: []
  # - host: octobox.local
  tls: []
  #  - secretName: octobox-tls
  #    hosts:
  #    - octobox.local

  ## Paths to serve from nginx instead of octobox
  staticAssetsPrefixes:
  - /assets/
  - /android-icon-
  - /apple-icon
  - /browserconfig.xml
  - /favicon
  - /icon/
  - /manifest.json
  - /ms-icon-
  - /robots.txt

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

## nginx for serving static assets
nginx:
  enabled: true
  fullnameOverride: nginx-static-assets

  commonLabels:
    role: static-assets

  podLabels:
    role: static-assets

  replicaCount: 1

  minReadySeconds: 0

  extraVolumeMounts:
  - name: static-assets
    mountPath: /usr/src/app/public

  extraVolumes:
  - name: static-assets
    emptyDir: {}

  initContainers: |
    - name: octobox-static-assets
      image: {{ include "octobox.image" $ | quote }}
      imagePullPolicy: {{ $.Values.global.octobox.image.pullPolicy }}
      command: [ "cp", "-r", "/usr/src/app/public/.", "/static-assets" ]

      # specify some default requests/limits (not customizable),
      # better than none, also probably doesn't need much customization
      resources:
        requests:
          cpu: 10m
          memory: 30Mi
        limits:
          cpu: 30m
          memory: 80Mi
      volumeMounts:
      - mountPath: /static-assets
        name: static-assets

  serverBlock: |-
    server {
      listen 8080;

      root /usr/src/app/public;
      try_files $uri =404;
      access_log off;
      gzip on;
      gzip_types *;

      location ~ ^/(assets/|android-icon-|apple-icon|favicon|icon/|ms-icon-) {
        expires 1y;
        add_header Cache-Control "public,max-age=31536000,immutable";
      }

      location ~ ^/(browserconfig.xml|manifest.json|robots.txt) {
        expires 6h;
        add_header Cache-Control "public,max-age=21600,immutable";
      }
    }

  service:
    type: ClusterIP

postgresql:
  enabled: true

  fullnameOverride: postgresql

  primary:
    # enable pg_stat_statements (required by octobox) with postgres user on initialization
    extendedConfiguration: |
      shared_preload_libraries = 'pg_stat_statements'
      pg_stat_statements.max = 10000
      pg_stat_statements.track = all
    initdb:
      scripts:
        ensure_pg_stat_statements.sh: |
          PGPASSWORD=$POSTGRES_POSTGRES_PASSWORD psql -U postgres octobox -c "CREATE EXTENSION IF NOT EXISTS pg_stat_statements;"

  auth:
    database: octobox
    username: octobox

  serviceBindings:
    enabled: true

redis:
  enabled: true

  fullnameOverride: redis

  replica:
    replicaCount: 0

  serviceBindings:
    enabled: true
